var canvas=document.querySelector(".game-area__ctx"),ctx=canvas.getContext("2d"),panelWalls=document.querySelector(".game-panel__walls"),gridCheckbox=document.querySelector("input[name=grid]"),newWallForm=document.querySelector(".game-panel-wall__newWall"),draggableWall=null,selectedPanelItem=null,walls=[];const gridSettings={squareWidth:100,squareHeight:120},getSelectedWall=()=>walls.find(e=>!0===e.active),getDraggableWall=()=>walls.find(e=>!0===e.draggable),getXPixelRatio=canvas.width/gridSettings.squareWidth,getYPixelRatio=canvas.height/gridSettings.squareHeight,getXcoords=e=>currArea.x+e.x*getXPixelRatio,getYcoords=e=>currArea.y+e.y*getYPixelRatio;var canvasWidthInSquares=canvas.width/getXPixelRatio,canvasHeightInSquares=canvas.height/getYPixelRatio;const generateId=()=>walls[walls.length-1].id+1,currArea={x:0,y:0,width:500,height:600},addWall=()=>{const e={x:0,y:0,w:15,h:15,id:generateId(),hide:!1};addWallToPanel(e),loadWalls()},hideWall=(e,a)=>{e.classList.toggle("active");const l=walls.find(e=>e.id===a);l.hide=!l.hide,loadWalls()},copyWall=e=>{const a={...walls.filter(a=>a.id===e)[0],hide:!1,id:generateId()};addWallToPanel(a),loadWalls()},updatePanel=e=>{const a=document.querySelector(`#wall-${e.id}`);for(let l in e)a.querySelector(`input[name=${l}]`)&&(a.querySelector(`input[name=${l}]`).value=e[l])},setSelectedPanelItem=e=>{if(null===e)return selectedPanelItem.classList.remove("active"),void(selectedPanelItem=null);selectedPanelItem&&selectedPanelItem.classList.remove("active"),(selectedPanelItem=e).classList.add("active")},setSelectedWall=e=>{setSelectedPanelItem(e),walls.forEach(a=>{e.id===`wall-${a.id}`?a.active=!0:a.active=!1}),loadWalls()},wallChange=e=>{const a=walls.find(e=>!0===e.active);a[e.name]=+e.value,console.log(a),loadWalls()},addWallToPanel=e=>{walls.find(a=>a.id===e.id)||(walls.push(e),panelWalls.insertAdjacentHTML("beforeend",`<div \n        class="game-panel__wall game-panel-wall"\n        id="wall-${e.id}"\n        onclick="setSelectedWall(this)"\n    >\n        <div class="game-panel-wall__coords">\n            <span classname="game-panel">x:</span>\n            <input name="x" oninput="wallChange(this)" value="${e.x}">\n            <span>y:</span>\n            <input name="y" oninput="wallChange(this)" value="${e.y}">\n        </div>\n        <div class="game-panel-wall__size">\n            <span>width:</span>\n            <input  oninput="wallChange(this)" name="w" value="${e.w}">\n            <span>height:</span>\n            <input oninput="wallChange(this)" name="h" value="${e.h}">\n        </div>\n        <button class="game-panel-wall__copy" onClick="copyWall(${e.id})">Copy</button>\n        <button class="game-panel-wall__hide" onClick="hideWall(this, ${e.id})">\n        Toggle hide\n        </button>\n    </div>`))},toggleGrid=e=>{if(gridCheckbox.checked){ctx.beginPath();const e=canvas.width-2,t=canvas.height-2,n=e/gridSettings.squareWidth,s=t/gridSettings.squareHeight;ctx.strokeStyle="#bdbdbd",ctx.lineWidth=.1;for(var a=n;a<e;a+=n)ctx.strokeRect(a,0,.1,t);for(var l=s;l<t;l+=s)ctx.strokeRect(0,l,e,.1);ctx.fill(),ctx.closePath()}},updateArea=e=>{e.hide||(addWallToPanel(e),ctx.beginPath(),ctx.rect(getXcoords(e),getYcoords(e),e.w*getXPixelRatio,e.h*getYPixelRatio),e.active&&(ctx.strokeStyle="red",ctx.lineWidth=5,ctx.stroke()),ctx.fill(),ctx.closePath())},loadWalls=()=>{ctx.clearRect(0,0,canvas.width,canvas.height),toggleGrid(),walls.map(e=>{updateArea(e),updatePanel(e)})};updateArea({x:0,y:0,w:30,h:30,id:1,hide:!1}),loadWalls();const takeDraggableWall=e=>{walls.forEach(a=>{e.layerX>getXcoords(a)&&e.layerX<getXcoords(a)+a.w*getXPixelRatio&&e.layerY>getYcoords(a)&&e.layerY<getYcoords(a)+a.h*getYPixelRatio?(a.active=!0,setSelectedPanelItem(document.querySelector(`#wall-${a.id}`)),a.draggable=!0):a.active=!1}),!getSelectedWall()&&selectedPanelItem&&setSelectedPanelItem(null),loadWalls()},squaresToCoords=(e,a)=>{if("X"===a){return Math.round(e/getXPixelRatio)}if("Y"===a){return Math.round(e/getYPixelRatio)}},dragWall=e=>{const a=getDraggableWall();if(a){let l=Math.round(e.layerX-currArea.x-a.w*getXPixelRatio/2),t=Math.round(e.layerY-currArea.y-a.h*getYPixelRatio/2);l=squaresToCoords(l,"X"),t=squaresToCoords(t,"Y"),l<0&&(l=0),t<0&&(t=0),l+a.w>canvasWidthInSquares&&(l=canvasWidthInSquares-a.w),t+a.h>canvasHeightInSquares&&(t=canvasHeightInSquares-a.h),a.x=l,a.y=t,loadWalls()}},dragWallOnKey=e=>{let a=getSelectedWall();if(a){let l=a.w>a.h?"w":"h";switch(e.code){case"KeyD":case"ArrowRight":a.x+a.w<canvasWidthInSquares?a.x+=1:a.x=canvasWidthInSquares-a.w;break;case"KeyA":case"ArrowLeft":0<a.x&&(a.x-=1);break;case"KeyS":case"ArrowDown":a.y+1+a.h<canvasHeightInSquares?a.y+=1:a.y=canvasHeightInSquares-a.h;break;case"KeyW":case"ArrowUp":0<a.y&&(a.y-=1);break;case"KeyQ":a[l]>10&&(a[l]-=1);break;case"KeyE":a[l]+=1}}loadWalls()},dropDraggableWall=e=>{const a=getDraggableWall();a&&(a.draggable=null)};canvas.addEventListener("mousedown",takeDraggableWall),canvas.addEventListener("mousemove",dragWall),document.addEventListener("keydown",dragWallOnKey),document.addEventListener("mouseup",dropDraggableWall);