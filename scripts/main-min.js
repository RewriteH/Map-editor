var canvas=document.querySelector(".game-area__ctx"),ctx=canvas.getContext("2d"),panelWalls=document.querySelector(".game-panel__walls"),panelAreas=document.querySelector(".game-panel__areas"),gridCheckbox=document.querySelector("input[name=grid]"),newWallForm=document.querySelector(".game-panel-wall__newWall"),draggableWall=null,selectedPanelItem=null,areas=[{x:36,y:5,w:30,h:30,id:1,color:"rgba(0, 0, 0, 0.2)"},{x:15,y:65,w:30,h:30,id:2,color:"rgba(0, 0, 0, 0.2)"}],walls=[{x:0,y:0,w:30,h:15,id:1,hide:!1},{x:0,y:0,w:15,h:15,id:2,hide:!1}];const gridSettings={squareWidth:100,squareHeight:120},getSelectedWall=()=>walls.find(e=>!0===e.active),getDraggableWall=()=>walls.find(e=>!0===e.draggable),getSelectedArea=()=>areas.find(e=>!0===e.active),getXPixelRatio=canvas.width/gridSettings.squareWidth,getYPixelRatio=canvas.height/gridSettings.squareHeight,getXcoords=e=>e.x*getXPixelRatio,getYcoords=e=>e.y*getYPixelRatio;var canvasWidthInSquares=gridSettings.squareWidth,canvasHeightInSquares=gridSettings.squareHeight;const generateWallId=()=>walls.length+1||1,generateAreaId=()=>areas.length+1||1,addWall=()=>{const e={x:0,y:0,w:15,h:15,id:generateWallId(),hide:!1};walls.push(e),addWallToPanel(e),loadWalls()},hideWall=(e,a)=>{e.classList.toggle("active");const l=walls.find(e=>e.id===a);l.hide=!l.hide,loadWalls()},copyWall=e=>{const a={...walls.filter(a=>a.id===e)[0],hide:!1,id:generateWallId()};walls.push(a),addWallToPanel(a),loadWalls()},deleteWall=e=>{const a=walls.findIndex(a=>a.id===e);walls.splice(a,1),document.querySelector(`#wall-${e}`).remove(),loadWalls()},updateWallPanel=e=>{const a=document.querySelector(`#wall-${e.id}`);for(let l in e)a.querySelector(`input[name=${l}]`)&&(a.querySelector(`input[name=${l}]`).value=e[l])},setSelectedPanelItem=e=>{if(null===e)return selectedPanelItem.classList.remove("active"),void(selectedPanelItem=null);selectedPanelItem&&selectedPanelItem.classList.remove("active"),(selectedPanelItem=e).classList.add("active")},removeSelectedItem=()=>{const e=getSelectedWall();e&&(e.active=!1);const a=getSelectedArea();a&&(a.active=!1)},setSelectedWall=e=>{removeSelectedItem(),setSelectedPanelItem(e),walls.forEach(a=>{e.id===`wall-${a.id}`?a.active=!0:a.active=!1}),loadWalls()},setSelectedArea=e=>{removeSelectedItem(),setSelectedPanelItem(e),areas.forEach(a=>{e.id===`area-${a.id}`?a.active=!0:a.active=!1}),console.log(getSelectedArea()),loadWalls()},wallChange=e=>{getSelectedWall()[e.name]=+e.value,loadWalls()},areaChange=e=>{getSelectedArea()[e.name]=+e.value,loadWalls()},addWallToPanel=e=>{document.querySelector(`#wall-${e.id}`)||panelWalls.insertAdjacentHTML("beforeend",`<div \n        class="game-panel__item game-panel-item"\n        id="wall-${e.id}"\n        onclick="setSelectedWall(this)"\n    >\n        <div class="game-panel-item__coords">\n            <span>x:</span>\n            <input name="x" oninput="wallChange(this)" value="${e.x}">\n            <span>y:</span>\n            <input name="y" oninput="wallChange(this)" value="${e.y}">\n        </div>\n        <div class="game-panel-item__size">\n            <span>width:</span>\n            <input  oninput="wallChange(this)" name="w" value="${e.w}">\n            <span>height:</span>\n            <input oninput="wallChange(this)" name="h" value="${e.h}">\n        </div>\n        <button class="game-panel-item__copy" onClick="copyWall(${e.id})">Copy</button>\n        <button class="game-panel-item__hide" onClick="hideWall(this, ${e.id})">\n            Toggle hide\n        </button>\n        <button class="game-panel-item__delete" onClick="deleteWall(${e.id})">\n            Delete\n        </button>\n    </div>`)},addAreaToPanel=e=>{document.querySelector(`#area-${e.id}`)||panelAreas.insertAdjacentHTML("beforeend",`<div \n        class="game-panel__item game-panel-item"\n        id="area-${e.id}"\n        onclick="setSelectedArea(this)"\n    >\n        <div class="game-panel-item__coords">\n            <span>x:</span>\n            <input oninput="areaChange(this)" name="x" value="${e.x}">\n            <span>y:</span>\n            <input oninput="areaChange(this)" name="y" value="${e.y}">\n        </div>\n        <button>Coup</button>\n    </div>`)},toggleGrid=e=>{if(gridCheckbox.checked){ctx.beginPath();const e=canvas.width-2,t=canvas.height-2,n=e/gridSettings.squareWidth,s=t/gridSettings.squareHeight;ctx.strokeStyle="#bdbdbd",ctx.lineWidth=.1;for(var a=n;a<e;a+=n)ctx.strokeRect(a,0,.1,t);for(var l=s;l<t;l+=s)ctx.strokeRect(0,l,e,.1);ctx.fill(),ctx.closePath()}},drawElement=e=>{e.hide||(ctx.beginPath(),ctx.rect(getXcoords(e),getYcoords(e),e.w*getXPixelRatio,e.h*getYPixelRatio),e.active&&(ctx.strokeStyle="red",ctx.lineWidth=3,ctx.stroke()),ctx.fillStyle=e.color||"black",ctx.fill(),ctx.closePath())},loadWalls=()=>{ctx.clearRect(0,0,canvas.width,canvas.height),toggleGrid(),areas.map(e=>{conditionColor(e),addAreaToPanel(e),drawElement(e)}),walls.map(e=>{addWallToPanel(e),drawElement(e),updateWallPanel(e)})},conditionColor=e=>{e.x+e.w>canvasWidthInSquares/2&&(e.color="rgba(65, 212, 225, 0.3)"),e.y+e.h>canvasHeightInSquares/2&&(e.color="rgba(225, 79, 65, 0.3)")};loadWalls();const takeDraggableWall=e=>{removeSelectedItem();for(let a=0;a<walls.length;a++)if(e.layerX>getXcoords(walls[a])&&e.layerX<getXcoords(walls[a])+walls[a].w*getXPixelRatio&&e.layerY>getYcoords(walls[a])&&e.layerY<getYcoords(walls[a])+walls[a].h*getYPixelRatio&&!walls[a].hide){walls[a].active=!0,setSelectedPanelItem(document.querySelector(`#wall-${walls[a].id}`)),walls[a].draggable=!0;break}!getSelectedWall()&&selectedPanelItem&&setSelectedPanelItem(null),loadWalls()},squaresToCoords=(e,a)=>{if("X"===a){return Math.round(e/getXPixelRatio)}if("Y"===a){return Math.round(e/getYPixelRatio)}},dragWall=e=>{const a=getDraggableWall();if(a){let l=Math.round(e.layerX-a.w*getXPixelRatio/2),t=Math.round(e.layerY-a.h*getYPixelRatio/2);l=squaresToCoords(l,"X"),t=squaresToCoords(t,"Y"),l<0&&(l=0),t<0&&(t=0),l+a.w>canvasWidthInSquares&&(l=canvasWidthInSquares-a.w),t+a.h>canvasHeightInSquares&&(t=canvasHeightInSquares-a.h),a.x=l,a.y=t,loadWalls()}},dragWallOnKey=e=>{let a=getSelectedWall();if(a){let l=a.w>a.h?"w":"h";switch(e.code){case"KeyD":case"ArrowRight":a.x+a.w<canvasWidthInSquares?a.x+=1:a.x=canvasWidthInSquares-a.w;break;case"KeyA":case"ArrowLeft":0<a.x&&(a.x-=1);break;case"KeyS":case"ArrowDown":a.y+1+a.h<canvasHeightInSquares?a.y+=1:a.y=canvasHeightInSquares-a.h;break;case"KeyW":case"ArrowUp":0<a.y&&(a.y-=1);break;case"KeyQ":a[l]>10&&(a[l]-=1);break;case"KeyE":a[l]+=1}}loadWalls()},dropDraggableWall=e=>{const a=getDraggableWall();a&&(a.draggable=null)};canvas.addEventListener("mousedown",takeDraggableWall),canvas.addEventListener("mousemove",dragWall),document.addEventListener("keydown",dragWallOnKey),document.addEventListener("mouseup",dropDraggableWall);