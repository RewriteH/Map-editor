var canvas=document.querySelector(".game-area__ctx"),ctx=canvas.getContext("2d"),panelWalls=document.querySelector(".game-panel-walls"),panelAreas=document.querySelector(".game-panel-areas"),gridCheckbox=document.querySelector("input[name=grid]"),newElementButton=document.querySelectorAll(".game-panel-item__newElement"),hideWallsCheckbox=document.querySelector("input[name=hideWalls]"),hideAreasCheckbox=document.querySelector("input[name=hideAreas]"),selectedPanelItem=null,selectedPanelTab=null,selectedElements=null,areas=[{x:36,y:5,w:30,h:30,id:1,color:"rgba(50,50,50,0.3)",extra:{coup:!1,x:0,y:0}},{x:15,y:65,w:30,h:30,id:2,color:"rgba(50,50,50,0.3)",extra:{coup:!1,x:0,y:0}}],walls=[{x:0,y:0,w:30,h:15,id:1,hide:!1},{x:0,y:0,w:15,h:15,id:2,hide:!1}];const gridSettings={squareWidth:100,squareHeight:120},getSelectedElement=()=>selectedElements?selectedElements.find(e=>!0===e.active):null,getDraggableElement=()=>selectedElements?selectedElements.find(e=>!0===e.draggable):null,getSelectedWall=()=>walls.find(e=>!0===e.active),getAreaById=e=>areas.find(t=>t.id===e),getSelectedArea=()=>areas.find(e=>!0===e.active),getXPixelRatio=canvas.width/gridSettings.squareWidth,getYPixelRatio=canvas.height/gridSettings.squareHeight,getXcoords=e=>e.x*getXPixelRatio,getYcoords=e=>e.y*getYPixelRatio,canvasWidthInSquares=gridSettings.squareWidth,canvasHeightInSquares=gridSettings.squareHeight,generateElementId=()=>selectedElements.length+1||1,showAllHideElements=e=>{e.checked&&(hideWallsCheckbox.checked||(panelWalls.querySelectorAll(".game-panel-item__hide").forEach(e=>e.classList.remove("active")),walls.forEach(e=>e.hide=!1)),hideAreasCheckbox.checked||(panelAreas.querySelectorAll(".game-panel-item__hide").forEach(e=>e.classList.remove("active")),areas.forEach(e=>e.hide=!1)),loadWalls())},hideElement=(e,t)=>{e.classList.toggle("active");const a=selectedElements.find(e=>e.id===t);a.hide=!a.hide,loadWalls()},copyElement=e=>{console.log(e);const t={...selectedElements.filter(t=>t.id===e)[0],hide:!1,id:generateElementId()};selectedElements.push(t),loadWalls()},deleteElement=e=>{const t=selectedElements.findIndex(t=>t.id===e);selectedElements.splice(t,1),document.querySelector(`#${selectedPanelTab}-${e}`).remove(),loadWalls()},setSelectedTab=e=>{if("settings"===e.id)return selectedElements=null,void(selectedPanelTab=null);"walls"===e.id?(selectedElements=walls,selectedPanelTab="wall"):"areas"===e.id?(selectedElements=areas,selectedPanelTab="area"):"wind"===e.id&&(selectedElements=wind,selectedPanelTab="wind")},updateWallPanel=e=>{const t=document.querySelector(`#wall-${e.id}`);for(let a in e)t.querySelector(`input[name=${a}]`)&&(t.querySelector(`input[name=${a}]`).value=e[a])},setSelectedPanelItem=e=>{if(null===e)return selectedPanelItem.classList.remove("active"),void(selectedPanelItem=null);selectedPanelItem&&selectedPanelItem.classList.remove("active"),(selectedPanelItem=e).classList.add("active")},removeSelectedItem=()=>{const e=getSelectedWall();e&&(e.active=!1);const t=getSelectedArea();t&&(t.active=!1)},setSelectedElement=e=>{removeSelectedItem(),setSelectedPanelItem(e),selectedElements.forEach(t=>{e.id===`${selectedPanelTab}-${t.id}`?t.active=!0:t.active=!1}),loadWalls()},addWallToPanel=e=>{document.querySelector(`#wall-${e.id}`)||panelWalls.insertAdjacentHTML("beforeend",`<div \n        class="game-panel-walls__item game-panel-item"\n        id="wall-${e.id}"\n        onmousedown="setSelectedElement(this)"\n    >\n        <div class="game-panel-item__coords">\n            <span>x:</span>\n            <input name="x" oninput="elementChange(this)" value="${e.x}">\n            <span>y:</span>\n            <input name="y" oninput="elementChange(this)" value="${e.y}">\n        </div>\n        <div class="game-panel-item__size">\n            <span>width:</span>\n            <input oninput="elementChange(this)" name="w" value="${e.w}">\n            <span>height:</span>\n            <input oninput="elementChange(this)" name="h" value="${e.h}">\n        </div>\n        <button class="game-panel-item__copy" onClick="copyElement(${e.id})">Copy</button>\n        <button class="game-panel-item__hide" onClick="hideElement(this, ${e.id})">\n            Toggle hide\n        </button>\n        <button class="game-panel-item__delete" onClick="deleteElement(${e.id})">\n            Delete\n        </button>\n    </div>`)},addAreaToPanel=e=>{document.querySelector(`#area-${e.id}`)||panelAreas.insertAdjacentHTML("beforeend",`<div \n        class="game-panel-areas__item game-panel-item"\n        id="area-${e.id}"\n        onmousedown="setSelectedElement(this)"\n    >\n        <div class="game-panel-item__coords">\n            <span>x:</span>\n            <input name="x" oninput="elementChange(this)" value="${e.x}">\n            <span>y:</span>\n            <input name="y" oninput="elementChange(this)" value="${e.y}">\n        </div>\n        <div class="game-panel-item__size">\n            <span>width:</span>\n            <input oninput="elementChange(this)" name="w" value="${e.w}">\n            <span>height:</span>\n            <input oninput="elementChange(this)" name="h" value="${e.h}">\n        </div>\n        <div class="game-panel-item__params">\n            <div>\n                <label for="x">x</label>\n                <input id="x" type="checkbox" checked="${e.extra.x}">\n            </div>\n            <div>\n                <label for="y">y</label>\n                <input id="y" type="checkbox" checked="${e.extra.y}">\n            </div>\n            \n            <button class="game-panel-item__hide" onClick="coupArea(${e.id})">\n                Coup\n            </button>\n            \n        </div>\n        <button class="game-panel-item__copy" onClick="copyElement(${e.id})">Copy</button>\n        <button class="game-panel-item__hide" onClick="hideElement(this, ${e.id})">\n            Toggle hide\n        </button>\n        <button class="game-panel-item__delete" onClick="deleteElement(${e.id})">\n            Delete\n        </button>\n    </div>`)},coupArea=e=>{getAreaById(e).color="rgba(0, 0, 0, 0.3)",loadWalls()},changeAreaColor=e=>{const t={1:50,2:50,3:50};e.w>canvasWidthInSquares/2&&(t[1]=90),e.h>canvasHeightInSquares/2&&(t[2]=90),e.x+e.w>canvasWidthInSquares/2&&(t[3]=90),console.log(`rgba(${t[1]}, ${t[2]}, ${t[3]}, 0.3)`),e.color=`rgba(${t[1]}, ${t[2]}, ${t[3]}, 0.3)`},toggleGrid=e=>{if(gridCheckbox.checked){ctx.beginPath();const e=canvas.width-2,l=canvas.height-2,n=e/gridSettings.squareWidth,s=l/gridSettings.squareHeight;ctx.strokeStyle="#bdbdbd",ctx.lineWidth=.1;for(var t=n;t<e;t+=n)ctx.strokeRect(t,0,.1,l);for(var a=s;a<l;a+=s)ctx.strokeRect(0,a,e,.1);ctx.fill(),ctx.closePath()}},drawElement=e=>{e.hide||(ctx.beginPath(),ctx.rect(getXcoords(e),getYcoords(e),e.w*getXPixelRatio,e.h*getYPixelRatio),e.active&&(ctx.strokeStyle="red",ctx.lineWidth=3,ctx.stroke()),ctx.fillStyle=e.color||"black",ctx.fill(),ctx.closePath())},loadWalls=()=>{ctx.clearRect(0,0,canvas.width,canvas.height),toggleGrid(),areas.map(e=>{changeAreaColor(e),addAreaToPanel(e),drawElement(e)}),hideWallsCheckbox.checked||walls.map(e=>{addWallToPanel(e),updateWallPanel(e),drawElement(e)})};loadWalls();const elementChange=e=>{getSelectedElement()[e.name]=+e.value,loadWalls()},addElement=()=>{const e={x:0,y:0,w:15,h:15,id:generateElementId(),hide:!1};selectedElements===areas&&(e.extra={x:0,y:0,coup:!1},e.color="rgba(65, 212, 225, 0.3)"),selectedElements.push(e),loadWalls()},takeDraggableElement=e=>{removeSelectedItem();const t=selectedElements;if(t){for(let a=0;a<t.length;a++)if(e.layerX>getXcoords(t[a])&&e.layerX<getXcoords(t[a])+t[a].w*getXPixelRatio&&e.layerY>getYcoords(t[a])&&e.layerY<getYcoords(t[a])+t[a].h*getYPixelRatio&&!t[a].hide){t[a].active=!0,setSelectedPanelItem(document.querySelector(`#${selectedPanelTab}-${t[a].id}`)),t[a].draggable=!0;break}!getSelectedElement()&&selectedPanelItem&&setSelectedPanelItem(null),loadWalls()}},dragElement=e=>{const t=getDraggableElement();if(t){let a=Math.round((e.layerX-t.x)/getXPixelRatio),l=Math.round((e.layerY-t.y)/getYPixelRatio);a<0&&(a=0),l<0&&(l=0),a+t.w>canvasWidthInSquares&&(a=canvasWidthInSquares-t.w),l+t.h>canvasHeightInSquares&&(l=canvasHeightInSquares-t.h),t.x=a,t.y=l,loadWalls()}},dragElementOnKey=e=>{let t=getSelectedElement();if(t){let a=t.w>t.h?"w":"h";switch(e.code){case"KeyD":case"ArrowRight":t.x+t.w<canvasWidthInSquares?t.x+=1:t.x=canvasWidthInSquares-t.w;break;case"KeyA":case"ArrowLeft":0<t.x&&(t.x-=1);break;case"KeyS":case"ArrowDown":t.y+1+t.h<canvasHeightInSquares?t.y+=1:t.y=canvasHeightInSquares-t.h;break;case"KeyW":case"ArrowUp":0<t.y&&(t.y-=1);break;case"KeyQ":t[a]>10&&(t[a]-=1);break;case"KeyE":t[a]+=1}}loadWalls()},dropDraggableElement=e=>{const t=getDraggableElement();t&&(t.draggable=null)};newElementButton.forEach(e=>e.addEventListener("click",addElement)),canvas.addEventListener("mousedown",takeDraggableElement),canvas.addEventListener("mousemove",dragElement),document.addEventListener("keydown",dragElementOnKey),document.addEventListener("mouseup",dropDraggableElement);