var canvas=document.querySelector(".game-area__ctx"),ctx=canvas.getContext("2d"),panelWalls=document.querySelector(".game-panel__walls"),draggableWall=null;let selectedPanelItem=null,walls=[];const getSelectedWall=()=>walls.find(e=>!0===e.active),getDraggableWall=()=>walls.find(e=>!0===e.draggable),getXcoords=e=>currArea.x+e.x,getYcoords=e=>currArea.y+e.y,currArea={x:0,y:0,width:150,height:170},setSelectedPanelItem=e=>{selectedPanelItem&&selectedPanelItem.classList.remove("active"),(selectedPanelItem=e).classList.add("active")},setSelectedWall=e=>{setSelectedPanelItem(e),walls.forEach(a=>{e.id===`wall-${a.id}`?a.active=!0:a.active=!1}),loadWalls()},wallChange=e=>{walls.find(e=>!0===e.active)[e.name]=+e.value,loadWalls()},addWall=e=>{walls.find(a=>a.id===e.id)||(walls.push(e),panelWalls.insertAdjacentHTML("beforeend",`<div \n        class="game-panel__wall game-panel-wall"\n        id="wall-${e.id}"r\n        onclick="setSelectedWall(this)"\n    >\n        <div class="game-panel-wall__coords">\n            <span classname="game-panel">x:</span>\n            <input name="x" oninput="wallChange(this)" value="${e.x}">\n            <span>y:</span>\n            <input name="y" oninput="wallChange(this)" value="${e.y}">\n        </div>\n        <div class="game-panel-wall__size">\n            <span>width:</span>\n            <input  oninput="wallChange(this)" name="w" value="${e.w}">\n            <span>height:</span>\n            <input oninput="wallChange(this)" name="h" value="${e.h}">\n        </div>\n    </div>`))},updatePanel=e=>{const a=document.querySelector(`#wall-${e.id}`);for(let l in e)a.querySelector(`input[name=${l}]`)&&(a.querySelector(`input[name=${l}]`).value=e[l])},toggleGrid=e=>{if(e.checked){ctx.beginPath();const e=canvas.width-1,t=canvas.height-1;ctx.strokeStyle="black",ctx.lineWidth=.1;for(var a=-.5;a<e;a+=30)ctx.strokeRect(a,0,.1,t);for(var l=-.5;l<t;l+=30)ctx.strokeRect(0,l,e,.1);ctx.fill(),ctx.closePath()}else ctx.clearRect(0,0,canvas.width,canvas.height)},updateArea=e=>{grid(),ctx.beginPath(),addWall(e),ctx.rect(getXcoords(e),getYcoords(e),e.w,e.h),e.active&&(ctx.strokeStyle="red",ctx.lineWidth=5,ctx.stroke()),ctx.fill(),ctx.closePath()},loadWalls=()=>{ctx.clearRect(0,0,canvas.width,canvas.height),walls.map(e=>{updateArea(e),updatePanel(e)})};updateArea({x:0,y:0,w:15,h:50,id:1,burn:[],permeability:[]}),updateArea({x:50,y:50,w:15,h:50,id:2});const takeDraggableWall=e=>{walls.forEach(a=>{e.layerX>getXcoords(a)&&e.layerX<getXcoords(a)+a.w&&e.layerY>getYcoords(a)&&e.layerY<getYcoords(a)+a.h?(a.active=!0,setSelectedPanelItem(document.querySelector(`#wall-${a.id}`)),a.draggable=!0):a.active=!1}),loadWalls()},dragWall=e=>{const a=getDraggableWall();if(a){let l=Math.round(e.layerX-currArea.x-a.w/2),t=Math.round(e.layerY-currArea.y-a.h/2);l<0&&(l=0),l>=currArea.width&&(l=currArea.width),t<0&&(t=0),t>=currArea.height&&(t=currArea.height),a.x=l,a.y=t,loadWalls()}},dragWallOnKey=e=>{let a=getSelectedWall(),l=a.w>a.h?"w":"h";if(a)switch(e.code){case"KeyD":case"ArrowRight":currArea.width>a.x&&(a.x+=1);break;case"KeyA":case"ArrowLeft":0<a.x&&(a.x-=1);break;case"KeyS":case"ArrowDown":currArea.height>a.y&&(a.y+=1);break;case"KeyW":case"ArrowUp":0<a.y&&(a.y-=1);break;case"KeyQ":a[l]>10&&(a[l]-=1);break;case"KeyE":a[l]+=1}updatePanel(a),loadWalls()},dropDraggableWall=e=>{const a=getDraggableWall();a&&(a.draggable=null)};canvas.addEventListener("mousedown",takeDraggableWall),canvas.addEventListener("mousemove",dragWall),document.addEventListener("keydown",dragWallOnKey),document.addEventListener("mouseup",dropDraggableWall);