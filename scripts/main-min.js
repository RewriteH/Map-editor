var canvas=document.querySelector(".game-area__ctx"),ctx=canvas.getContext("2d"),panelWalls=document.querySelector(".game-panel-walls"),panelAreas=document.querySelector(".game-panel-areas"),panelWinds=document.querySelector(".game-panel-winds"),gridCheckbox=document.querySelector("input[name=grid]"),newElementButton=document.querySelectorAll(".game-panel-item__newElement"),hideWallsCheckbox=document.querySelector("input[name=hideWalls]"),hideAreasCheckbox=document.querySelector("input[name=hideAreas]"),selectedPanelItem=null,selectedPanelTab=null,selectedElements=null;let gameObj=JSON.parse('{"areas":[{"x":25,"y":32,"w":15,"h":15,"id":1,"color":"rgba(50,50,50,0.3)","extra":{"coup":false,"x":true,"y":false},"active":false},{"x":30,"y":47,"w":5,"h":21,"id":3,"hide":false,"extra":{"x":0,"y":true,"coup":false},"active":false},{"x":9,"y":68,"w":21,"h":11,"id":4,"hide":false,"extra":{"x":0,"y":0,"coup":true},"active":false},{"x":79,"y":113,"w":11,"h":7,"id":5,"hide":false,"extra":{"x":true,"y":false,"coup":false},"active":false},{"x":90,"y":113,"w":10,"h":7,"id":6,"hide":false,"extra":{"x":0,"y":0,"coup":true},"active":false},{"x":91,"y":74,"w":9,"h":29,"id":7,"hide":false,"extra":{"x":0,"y":true,"coup":false},"active":false},{"x":91,"y":33,"w":9,"h":20,"id":8,"hide":false,"extra":{"x":0,"y":0,"coup":true},"active":false},{"x":91,"y":53,"w":9,"h":21,"id":9,"hide":false,"extra":{"x":false,"y":true,"coup":true},"active":false},{"x":2,"y":22,"w":5,"h":5,"id":10,"color":"rgba(50,50,50,0.3)","extra":{"coup":true,"x":true,"y":0},"hide":false}],"walls":[{"x":0,"y":79,"w":30,"h":1,"id":1,"hide":false,"active":false},{"x":10,"y":31,"w":31,"h":1,"id":2,"hide":false,"active":false},{"x":61,"y":103,"w":1,"h":10,"id":3,"hide":false,"active":false},{"x":9,"y":8,"w":1,"h":24,"id":4,"hide":false,"active":false},{"x":35,"y":47,"w":1,"h":21,"id":5,"hide":false,"active":false},{"x":9,"y":39,"w":1,"h":28,"id":6,"hide":false,"active":false},{"x":10,"y":39,"w":15,"h":1,"id":7,"hide":false,"active":false},{"x":40,"y":32,"w":1,"h":15,"id":8,"hide":false,"active":false},{"x":9,"y":67,"w":20,"h":1,"id":9,"hide":false,"active":false},{"x":24,"y":40,"w":1,"h":7,"id":10,"hide":false,"active":false},{"x":95,"y":112,"w":5,"h":1,"id":11,"hide":false,"active":false},{"x":36,"y":47,"w":5,"h":1,"id":12,"hide":false,"active":false},{"x":48,"y":67,"w":1,"h":15,"id":13,"hide":false,"active":false},{"x":61,"y":95,"w":12,"h":1,"id":14,"hide":false,"active":false},{"x":41,"y":90,"w":1,"h":14,"id":15,"hide":false,"active":false},{"x":60,"y":82,"w":1,"h":14,"id":16,"hide":false,"active":false},{"x":9,"y":112,"w":77,"h":1,"id":17,"hide":false,"active":false},{"x":36,"y":67,"w":12,"h":1,"id":18,"hide":false,"active":false},{"x":0,"y":104,"w":52,"h":1,"id":19,"hide":false,"active":false},{"x":85,"y":103,"w":1,"h":9,"id":20,"hide":false,"active":false},{"x":49,"y":81,"w":12,"h":1,"id":21,"hide":false,"active":false},{"x":29,"y":80,"w":1,"h":10,"id":22,"hide":false,"active":false},{"x":29,"y":90,"w":12,"h":1,"id":23,"hide":false,"active":false},{"x":0,"y":79,"w":30,"h":1,"id":24,"hide":false,"active":false},{"x":29,"y":47,"w":1,"h":21,"id":25,"hide":false,"active":false},{"x":74,"y":90,"w":5,"h":1,"id":26,"hide":false,"active":false},{"x":24,"y":47,"w":5,"h":1,"id":27,"hide":false,"active":false},{"x":90,"y":40,"w":1,"h":63,"id":28,"hide":false,"active":false},{"x":73,"y":90,"w":1,"h":15,"id":29,"hide":false,"active":false},{"x":85,"y":102,"w":5,"h":1,"id":30,"hide":false,"active":false}]}');var winds=[{x:10,y:30,w:30,h:30,id:1,color:"rgba(0,255,255,0.3)",params:{X:1,Y:1,forse:1}}],areas=gameObj.areas,walls=gameObj.walls;const gridSettings={squareWidth:100,squareHeight:120},getSelectedElement=()=>selectedElements?selectedElements.find(e=>!0===e.active):null,getDraggableElement=()=>selectedElements?selectedElements.find(e=>!0===e.draggable):null,getSelectedWall=()=>walls.find(e=>!0===e.active),getSelectedArea=()=>areas.find(e=>!0===e.active),getSelectedWind=()=>winds.find(e=>!0===e.active),getAreaById=e=>areas.find(a=>a.id===e),getXPixelRatio=canvas.width/gridSettings.squareWidth,getYPixelRatio=canvas.height/gridSettings.squareHeight,xCoordsToPixels=e=>e*getXPixelRatio,yCoordsToPixels=e=>e*getYPixelRatio,canvasWidthInSquares=gridSettings.squareWidth,canvasHeightInSquares=gridSettings.squareHeight,generateElementId=()=>selectedElements.length+1||1,showAllHideElements=e=>{e.checked&&(hideWallsCheckbox.checked||(panelWalls.querySelectorAll(".game-panel-item__hide").forEach(e=>e.classList.remove("active")),walls.forEach(e=>e.hide=!1)),hideAreasCheckbox.checked||(panelAreas.querySelectorAll(".game-panel-item__hide").forEach(e=>e.classList.remove("active")),areas.forEach(e=>e.hide=!1)),loadWalls())},hideElement=(e,a)=>{e.classList.toggle("active");const t=selectedElements.find(e=>e.id===a);t.hide=!t.hide,loadWalls()},copyElement=e=>{const a=selectedElements.filter(a=>a.id===e);let t;selectedElements===walls&&(t={...a[0],active:!1,draggable:!1,id:generateElementId()}),selectedElements!==winds&&selectedElements!==areas||(t={...a[0],params:{...a[0].params},active:!1,draggable:!1,id:generateElementId()}),selectedElements.push(t),loadWalls()},deleteElement=e=>{const a=selectedElements.findIndex(a=>a.id===e);selectedElements.splice(a,1),document.querySelector(`#${selectedPanelTab}-${e}`).remove(),loadWalls()},toggleAreaParams=(e,a)=>{a.classList.toggle("active");const t=getAreaById(e);t.params[a.id]=!t.params[a.id],loadWalls()},setSelectedTab=e=>{if("settings"===e.id)return selectedElements=null,void(selectedPanelTab=null);"walls"===e.id?(selectedElements=walls,selectedPanelTab="wall"):"areas"===e.id?(selectedElements=areas,selectedPanelTab="area"):"wind"===e.id&&(selectedElements=winds,selectedPanelTab="wind")},updateElementPanel=e=>{if(!selectedElements)return;const a=document.querySelector(`#${selectedPanelTab}-${e.id}`);a.querySelector("input[name=x]").value=e.x,console.log(a.querySelector("input[name=x]"))},setSelectedPanelItem=e=>{if(null===e)return selectedPanelItem.classList.remove("active"),void(selectedPanelItem=null);selectedPanelItem&&selectedPanelItem.classList.remove("active"),(selectedPanelItem=e).classList.add("active")},removeSelectedItem=()=>{const e=getSelectedWall(),a=getSelectedArea(),t=getSelectedWind();e&&(e.active=!1),a&&(a.active=!1),t&&(t.active=!1)},setSelectedElement=e=>{removeSelectedItem(),setSelectedPanelItem(e),selectedElements.forEach(a=>{e.id===`${selectedPanelTab}-${a.id}`?a.active=!0:a.active=!1}),loadWalls()},addWallToPanel=e=>{document.querySelector(`#wall-${e.id}`)||panelWalls.insertAdjacentHTML("beforeend",`<div \n        class="game-panel-walls__item game-panel-item"\n        id="wall-${e.id}"\n        onmousedown="setSelectedElement(this)"\n    >\n        <div class="game-panel-item__coords">\n            <span>x:</span>\n            <input name="x" oninput="elementChange(this)" value="${e.x}">\n            <span>y:</span>\n            <input name="y" oninput="elementChange(this)" value="${e.y}">\n        </div>\n        <div class="game-panel-item__size">\n            <span>width:</span>\n            <input oninput="elementChange(this)" name="w" value="${e.w}">\n            <span>height:</span>\n            <input oninput="elementChange(this)" name="h" value="${e.h}">\n        </div>\n        <button class="game-panel-item__copy" onClick="copyElement(${e.id})">Copy</button>\n        <button class="game-panel-item__hide" onClick="hideElement(this, ${e.id})">\n            Toggle hide\n        </button>\n        <button class="game-panel-item__delete" onClick="deleteElement(${e.id})">\n            Delete\n        </button>\n    </div>`)},addAreaToPanel=e=>{document.querySelector(`#area-${e.id}`)||panelAreas.insertAdjacentHTML("beforeend",`<div \n        class="game-panel-areas__item game-panel-item"\n        id="area-${e.id}"\n        onmousedown="setSelectedElement(this)"\n    >\n        <div class="game-panel-item__coords">\n            <span>x:</span>\n            <input name="x" oninput="elementChange(this)" value="${e.x}">\n            <span>y:</span>\n            <input name="y" oninput="elementChange(this)" value="${e.y}">\n        </div>\n        <div class="game-panel-item__size">\n            <span>width:</span>\n            <input oninput="elementChange(this)" name="w" value="${e.w}">\n            <span>height:</span>\n            <input oninput="elementChange(this)" name="h" value="${e.h}">\n        </div>\n        <div class="game-panel-item__params">\n            <button id="x" onClick="toggleAreaParams(${e.id}, this)" ">\n                X\n            </button>\n            <button id="y" onClick="toggleAreaParams(${e.id}, this)" ">\n                Y\n            </button>\n            <button class="game-panel-item__coup" onClick="coupArea(this, ${e.id})">\n                Coup\n            </button>\n        </div>\n        <button class="game-panel-item__copy" onClick="copyElement(${e.id})">Copy</button>\n        <button class="game-panel-item__hide" onClick="hideElement(this, ${e.id})">\n            Toggle hide\n        </button>\n        <button class="game-panel-item__delete" onClick="deleteElement(${e.id})">\n            Delete\n        </button>\n    </div>`)},addWindToPanel=e=>{document.querySelector(`#wind-${e.id}`)||panelWinds.insertAdjacentHTML("beforeend",`<div \n        class="game-panel-wind__item game-panel-item"\n        id="wind-${e.id}"\n        onmousedown="setSelectedElement(this)"\n    >\n        <div class="game-panel-item__coords">\n            <span>x:</span>\n            <input name="x" oninput="elementChange(this)" value="${e.x}">\n            <span>y:</span>\n            <input name="y" oninput="elementChange(this)" value="${e.y}">\n        </div>\n        <div class="game-panel-item__size">\n            <span>width:</span>\n            <input oninput="elementChange(this)" name="w" value="${e.w}">\n            <span>height:</span>\n            <input oninput="elementChange(this)" name="h" value="${e.h}">\n        </div>\n        <div class="game-panel-item__params">\n            <span>X:</span>\n            <input oninput="elementChange(this)" name="X" value="${e.params.X}">\n            <span>Y:</span>\n            <input oninput="elementChange(this)" name="Y" value="${e.params.Y}">\n            <span>Forse:</span>\n            <input oninput="elementChange(this)" name="forse" value="${e.params.forse}">\n        </div>\n        <button class="game-panel-item__copy" onClick="copyElement(${e.id})">Copy</button>\n        <button class="game-panel-item__hide" onClick="hideElement(this, ${e.id})">\n            Toggle hide\n        </button>\n        <button class="game-panel-item__delete" onClick="deleteElement(${e.id})">\n            Delete\n        </button>\n    </div>`)},coupArea=(e,a)=>{e.classList.toggle("active");const t=getAreaById(a);t.params.coup=!t.params.coup,loadWalls()},changeAreaColor=e=>{let a=220,t=220,l=220;e.params&&(!e.params.x||(a-=120),!e.params.y||(l-=120),!e.params.coup||(t-=150)),e.color=`rgba(${a},${t},${l}, 0.3)`},renderGrid=e=>{ctx.beginPath();const a=canvas.width-2,t=canvas.height-2,l=a/gridSettings.squareWidth,n=t/gridSettings.squareHeight;ctx.strokeStyle="#bdbdbd",ctx.lineWidth=.1;for(var s=l;s<a;s+=l)ctx.strokeRect(s,0,.1,t);for(var i=n;i<t;i+=n)ctx.strokeRect(0,i,a,.1);ctx.fill(),ctx.closePath()},drawElement=e=>{e.hide||(ctx.beginPath(),ctx.rect(xCoordsToPixels(e.x),yCoordsToPixels(e.y),xCoordsToPixels(e.w),yCoordsToPixels(e.h)),e.active&&(ctx.strokeStyle="red",ctx.lineWidth=3,ctx.stroke()),ctx.fillStyle=e.color||"black",ctx.fill(),ctx.closePath())},drawWindDirection=e=>{ctx.beginPath(),ctx.font="18px serif",ctx.fillStyle="red",ctx.fillText("Left <",xCoordsToPixels(e.x+e.w/2),yCoordsToPixels(e.y+e.h/2)),ctx.closePath()},blowWall=e=>{const a=e.x+e.w,t=e.y+e.h;currWalls=[],walls.forEach(l=>{l.x+l.w>e.x&&l.x<a&&l.y+l.h>e.y&&l.y<t&&currWalls.push(l)}),setTimeout(()=>{currWalls.forEach(a=>{e.params.X&&(a.x+=e.params.forse),e.params.Y&&(a.y+=e.params.forse)}),loadWalls()},1e3)},loadWalls=()=>{ctx.clearRect(0,0,canvas.width,canvas.height),gridCheckbox.checked&&renderGrid(),hideAreasCheckbox.checked||areas.forEach(e=>{changeAreaColor(e),addAreaToPanel(e),drawElement(e)}),winds.forEach(e=>{addWindToPanel(e),blowWall(e),drawElement(e),drawWindDirection(e)}),hideWallsCheckbox.checked||walls.forEach(e=>{addWallToPanel(e),drawElement(e)})};loadWalls();const elementChange=e=>{getSelectedElement()[e.name]=+e.value,loadWalls()},addElement=()=>{const e={x:canvasHeightInSquares/2,y:canvasWidthInSquares/2,w:15,h:15,id:generateElementId(),hide:!1};selectedElements===areas&&(e.params={x:0,y:0,coup:!1},e.color="rgba(65, 212, 225, 0.3)"),selectedElements===winds&&(e.params={X:10,Y:10,forse:1},e.color="rgba(0,255,255,0.3)"),selectedElements.push(e),loadWalls()},takeDraggableElement=e=>{xStartFoDrug=e.clientX-canvas.offsetTop,yStartFoDrug=e.clientY-canvas.offsetLeft,removeSelectedItem();const a=selectedElements;if(a){for(let e=0;e<a.length;e++){if(a[e].hide)continue;const t=xCoordsToPixels(a[e].x),l=t+xCoordsToPixels(a[e].w),n=xCoordsToPixels(a[e].y),s=n+xCoordsToPixels(a[e].h);if(xStartFoDrug>t&&xStartFoDrug<l&&yStartFoDrug>n&&yStartFoDrug<s){a[e].active=!0,setSelectedPanelItem(document.querySelector(`#${selectedPanelTab}-${a[e].id}`)),a[e].draggable=!0,a[e].xStatr=a[e].x,a[e].yStatr=a[e].y;break}}!getSelectedElement()&&selectedPanelItem&&setSelectedPanelItem(null),loadWalls()}};function xPixelsToCoords(e){return Math.round(e/getXPixelRatio)}function yPixelsToCoords(e){return Math.round(e/getYPixelRatio)}const dragElement=e=>{const a=e.clientX-canvas.offsetTop,t=e.clientY-canvas.offsetLeft,l=getDraggableElement();if(l){let e=xPixelsToCoords(a-xStartFoDrug),n=xPixelsToCoords(t-yStartFoDrug);const s=canvasWidthInSquares-l.w,i=canvasHeightInSquares-l.h,d=0,c=0;l.x=Math.min(l.xStatr+e,s),l.y=Math.min(l.yStatr+n,i),l.x=Math.max(l.x,d),l.y=Math.max(l.y,c),loadWalls()}},dragElementOnKey=e=>{let a=getSelectedElement();if(a){let t=a.w>a.h?"w":"h";switch(e.code){case"KeyD":case"ArrowRight":a.x+a.w<canvasWidthInSquares?a.x+=1:a.x=canvasWidthInSquares-a.w;break;case"KeyA":case"ArrowLeft":0<a.x&&(a.x-=1);break;case"KeyS":case"ArrowDown":a.y+1+a.h<canvasHeightInSquares?a.y+=1:a.y=canvasHeightInSquares-a.h;break;case"KeyW":case"ArrowUp":0<a.y&&(a.y-=1);break;case"KeyQ":a[t]>10&&(a[t]-=1);break;case"KeyE":a[t]+=1}}loadWalls()},dropDraggableElement=e=>{const a=getDraggableElement();a&&(a.draggable=null,delete a.xStatr,delete a.yStatr)};newElementButton.forEach(e=>e.addEventListener("click",addElement)),canvas.addEventListener("mousedown",takeDraggableElement),canvas.addEventListener("mousemove",dragElement),document.addEventListener("keydown",dragElementOnKey),document.addEventListener("mouseup",dropDraggableElement);